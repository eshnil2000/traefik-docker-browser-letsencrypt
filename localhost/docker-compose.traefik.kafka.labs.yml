#docker network create -d overlay --attachable docker-browser2_default
#gotty image from https://github.com/eshnil2000/docker-gotty
#crypto trading image from https://github.com/eshnil2000/crypto_trading
version: '3.3'
networks:
  docker-browser2_default:
    driver: overlay
    external:
      name:  docker-browser2_default
services:
  traefik:
    
    # The latest official supported Traefik docker image
    image: traefik:v2.3
    
    # Enables the Traefik Dashboard and tells Traefik to listen to docker
    # --providers tell Traefik to connect to the Docker provider
    # enable --log.level=INFO so we can see what Traefik is doing in the log files
    command: --api.insecure=true --providers.docker --log.level=INFO
    ports:
      # Exposes port 80 for incomming web requests
      - "80:80"
      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    
    networks:
      docker-browser2_default:
        #external:
          #name:  docker-browser2_default

  labs:
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    
    image: labs
    labels:
      - traefik.http.routers.labs.rule=Host(`localhost`)
      #- traefik.http.routers.labs.tls=true
      #- traefik.http.routers.labs.tls.certresolver=lets-encrypt
      #- traefik.port=80
      #- traefik.http.routers.labs.entrypoints: web
      - traefik.http.routers.labs.service=labs
      - traefik.http.services.labs.loadbalancer.server.port=8000
      - traefik.docker.network=docker-browser2_default
    
    networks:
      docker-browser2_default:
        #external:
          #name:  docker-browser2_default
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    labels:
      - traefik.http.routers.zookeeper.rule=Host(`zookeeper`)
    networks:
      docker-browser2_default:

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:9091
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_BROKER_ID: 1
    labels:
      - traefik.http.routers.kafka1.rule=Host(`kafka1`)
    networks:
      docker-browser2_default:
      
  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_BROKER_ID: 2
    labels:
      - traefik.http.routers.kafka2.rule=Host(`kafka2`)
    networks:
      docker-browser2_default:
  
  kafka3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_BROKER_ID: 3
    labels:
      - traefik.http.routers.kafka3.rule=Host(`kafka3`)
    networks:
      docker-browser2_default:
  
  
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    #ports:
    #  - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:9091"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    
    labels:
      - traefik.http.routers.kafdrop.rule=Host(`kafdrop.localhost`)
      - traefik.http.routers.kafdrop.service=kafdrop
      - traefik.http.services.kafdrop.loadbalancer.server.port=9000
      - traefik.docker.network=docker-browser2_default
    networks:
      docker-browser2_default:
  
  crypto:
    
    image: crypto-trading
    hostname: crypto
    labels:
      - traefik.http.routers.crypto.rule=Host(`crypto.localhost`)
      #- traefik.http.routers.crypto.tls=true
      #- traefik.http.routers.crypto.tls.certresolver=lets-encrypt
      #- traefik.port=80
      #- traefik.http.routers.crypto.entrypoints: web
      - traefik.http.routers.crypto.service=crypto
      - traefik.http.services.crypto.loadbalancer.server.port=5000
      - traefik.docker.network=docker-browser2_default
    
    networks:
      docker-browser2_default: